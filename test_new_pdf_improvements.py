#!/usr/bin/env python3
"""
Test NEW PDF improvements:
1. Unicode symbols (NO emoji)
2. Bold key metrics in insights
3. Professional recommendations formatting
4. Callout boxes validation
"""

# Mock result for testing PDF export directly
mock_result = {
    'domain_info': {
        'domain': 'Restaurant & Food',
        'domain_name': 'Nh√† h√†ng & ·∫®m th·ª±c',
        'expert_role': 'Chuy√™n gia Ph√¢n t√≠ch D·ªØ li·ªáu Ng√†nh F&B - ·∫®m th·ª±c Vi·ªát Nam'
    },
    'insights': {
        'executive_summary': 'Ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng cho c√°c s·∫£n ph·∫©m ·∫©m th·ª±c Vi·ªát Nam. K·∫øt qu·∫£ cho th·∫•y Ph·ªü b√≤ c√≥ doanh s·ªë cao nh·∫•t (‚Ç´75,000) v·ªõi ƒë√°nh gi√° t√≠ch c·ª±c (4.8/5). Khu v·ª±c TP.HCM v√† H√† N·ªôi l√† th·ªã tr∆∞·ªùng ch√≠nh.',
        'key_insights': [
            {
                'title': 'Ph·ªü b√≤ d·∫´n ƒë·∫ßu v·ªÅ doanh s·ªë',
                'description': 'S·∫£n ph·∫©m Ph·ªü b√≤ ƒë·∫°t doanh s·ªë cao nh·∫•t ‚Ç´75,000 v·ªõi 85 ƒë∆°n h√†ng v√† ƒë√°nh gi√° 4.8/5 sao.',
                'impact': 'high'
            },
            {
                'title': 'C√† ph√™ s·ªØa ƒë√° c√≥ l∆∞·ª£ng b√°n cao nh·∫•t',
                'description': 'M·∫∑c d√π gi√° th·∫•p (‚Ç´30,000), s·∫£n ph·∫©m n√†y c√≥ 200 ƒë∆°n b√°n - cao nh·∫•t trong danh s√°ch.',
                'impact': 'medium'
            },
            {
                'title': 'Th·ªã tr∆∞·ªùng t·∫≠p trung ·ªü 3 th√†nh ph·ªë l·ªõn',
                'description': 'H√† N·ªôi, TP.HCM v√† ƒê√† N·∫µng chi·∫øm 100% doanh s·ªë, c∆° h·ªôi m·ªü r·ªông th·ªã tr∆∞·ªùng t·ªânh.',
                'impact': 'medium'
            }
        ],
        'recommendations': [
            {
                'action': 'TƒÉng c∆∞·ªùng marketing cho Ph·ªü b√≤ t·∫°i c√°c khu v·ª±c m·ªõi',
                'expected_impact': 'TƒÉng 25-30% doanh s·ªë trong Q2',
                'timeline': '1-2 th√°ng',
                'priority': 'high'
            },
            {
                'action': 'M·ªü r·ªông ph√¢n ph·ªëi C√† ph√™ s·ªØa ƒë√° - s·∫£n ph·∫©m b√°n ch·∫°y',
                'expected_impact': 'TƒÉng 40% l∆∞·ª£ng b√°n, tƒÉng 20% doanh thu',
                'timeline': '2-3 tu·∫ßn',
                'priority': 'high'
            },
            {
                'action': 'Kh·∫£o s√°t th·ªã tr∆∞·ªùng t·ªânh l·∫ª ƒë·ªÉ m·ªü r·ªông',
                'expected_impact': 'Ti·ªÅm nƒÉng tƒÉng 50% th·ªã tr∆∞·ªùng',
                'timeline': '3-6 th√°ng',
                'priority': 'medium'
            }
        ]
    },
    'dashboard': {
        'kpis': {
            'T·ªïng doanh s·ªë': {
                'value': 225000.0,
                'status': 'Good',
                'benchmark': 200000,
                'benchmark_source': 'HubSpot Marketing Benchmarks'
            },
            'Trung b√¨nh ƒë√°nh gi√°': {
                'value': 4.4,
                'status': 'Excellent',
                'benchmark': 4.0,
                'benchmark_source': 'Zendesk Support Benchmarks'
            },
            'T·ªïng ƒë∆°n h√†ng': {
                'value': 560.0,
                'status': 'Good',
                'benchmark': 500,
                'benchmark_source': 'Gartner IT Benchmarks'
            },
            'Doanh s·ªë/ƒê∆°n': {
                'value': 401.8,
                'status': 'Good',
                'benchmark': 400,
                'benchmark_source': 'McKinsey Manufacturing Report'
            }
        },
        'charts': []  # No charts for this test
    },
    'performance': {
        'total': 2.5
    },
    'quality_scores': {
        'overall': 95
    }
}

# Mock DataFrame
class MockDataFrame:
    def __init__(self, data):
        self.data = data
        self.columns = list(data.keys())
        self._rows = len(list(data.values())[0])

    def __len__(self):
        return self._rows

    def select_dtypes(self, include=None):
        # Return mock with numeric columns
        numeric_cols = ['Doanh s·ªë', 'ƒê∆°n h√†ng', 'ƒê√°nh gi√°']

        class MockSubset:
            def __init__(self, cols):
                self.columns = cols
        return MockSubset(numeric_cols)

    def isnull(self):
        class MockNull:
            def sum(self):
                class MockSum:
                    def sum(self):
                        return 0
                return MockSum()
        return MockNull()

# Create mock df
df_data = {
    'S·∫£n ph·∫©m': ['Ph·ªü b√≤', 'C√† ph√™ s·ªØa ƒë√°', 'B√°nh m√¨', 'B√∫n ch·∫£', 'Ch√®'],
    'Doanh s·ªë': [75000, 30000, 45000, 60000, 35000],
    'ƒê∆°n h√†ng': [85, 200, 120, 95, 110],
    'ƒê√°nh gi√°': [4.8, 4.2, 4.5, 4.6, 4.3],
    'Khu v·ª±c': ['TP.HCM', 'H√† N·ªôi', 'ƒê√† N·∫µng', 'H√† N·ªôi', 'TP.HCM']
}

df = MockDataFrame(df_data)

print("=" * 80)
print("üß™ TESTING NEW PDF IMPROVEMENTS")
print("=" * 80)
print("")
print("‚úÖ Expected improvements:")
print("  1. Unicode symbols (¬ª ‚ñ† ‚óÜ ‚ñ∂ ‚ñ™) instead of emoji")
print("  2. Auto-bold key metrics (‚Ç´75,000, 4.8/5, 85 ƒë∆°n)")
print("  3. Professional recommendations with symbols (‚ñ≤ ‚óè ‚ñº)")
print("  4. Callout boxes for Executive Summary")
print("  5. Clickable benchmark sources")
print("")
print("=" * 80)
print("üìÑ Generating PDF...")
print("=" * 80)
print("")

# Import and generate
from src.utils.export_utils import export_to_pdf

try:
    pdf_bytes = export_to_pdf(mock_result, df, lang='vi')

    # Save to file
    output_file = 'test_output_NEW_IMPROVED.pdf'
    with open(output_file, 'wb') as f:
        f.write(pdf_bytes)

    print(f"‚úÖ SUCCESS: PDF generated!")
    print(f"   File: {output_file}")
    print(f"   Size: {len(pdf_bytes):,} bytes")
    print("")
    print("=" * 80)
    print("üîç VALIDATION CHECKLIST")
    print("=" * 80)
    print("")
    print("Open the PDF and verify:")
    print("  [ ] Section titles use Unicode symbols (¬ª ‚ñ† ‚óÜ ‚ñ∂ ‚ñ™) NOT emoji")
    print("  [ ] Executive Summary has callout box (bordered, light background)")
    print("  [ ] KPI table has 'Ngu·ªìn' (Source) column")
    print("  [ ] Benchmark sources are blue underlined links (clickable)")
    print("  [ ] Status indicators use ‚ñ≤‚ñº‚óè symbols with colors")
    print("  [ ] Insights: Key metrics are BOLDED (‚Ç´75,000, 4.8/5, etc.)")
    print("  [ ] Insights: Impact labels are colored ([HIGH IMPACT] in red)")
    print("  [ ] Recommendations: Priority symbols (‚ñ≤ ‚óè ‚ñº) visible")
    print("  [ ] Recommendations: Clear structure with bold labels")
    print("  [ ] Responsible party shown for each recommendation")
    print("")
    print("=" * 80)
    print("üìä COMPARISON INSTRUCTIONS")
    print("=" * 80)
    print("")
    print("Compare these files:")
    print(f"  OLD: test_output_vietnamese.pdf")
    print(f"  NEW: {output_file}")
    print("")
    print("Expected differences:")
    print("  ‚Ä¢ Icons: üìãüìä ‚Üí ¬ª ‚ñ† (more professional, reliable rendering)")
    print("  ‚Ä¢ Insights: Plain text ‚Üí Bold metrics + colored labels")
    print("  ‚Ä¢ Recommendations: Basic list ‚Üí Structured with symbols")
    print("  ‚Ä¢ Executive Summary: Plain paragraph ‚Üí Callout box")
    print("")

except Exception as e:
    print(f"‚ùå ERROR: {str(e)}")
    import traceback
    traceback.print_exc()
